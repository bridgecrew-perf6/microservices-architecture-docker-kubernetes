version: '3.9'

services:
  # MongoDB service
  mongodb:
    image: mongo:5.0.2
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD
    ports:
      - $MONGODB_LOCAL_PORT:$MONGODB_DOCKER_PORT
    volumes:
      - ./mongo_data:/data/db
    networks:
      - backend-network

  # Frontend app service
  service-frontend:
    build: 
      context: .
      dockerfile: microservices/service-frontend/Dockerfile
      args: 
        build_config: production
    ports: 
      - $FRONT_LOCAL_PORT:$FRONT_DOCKER_PORT
    environment:
      - PORT=$FRONT_DOCKER_PORT
      - SERVICE_API1_ENDPOINT=http://localhost:$BACKEND1_LOCAL_PORT/api
    networks:
      - frontend-network

  # Backend API 1 service
  service-backend1:
    restart: unless-stopped
    build: 
      context: .
      dockerfile: microservices/service-backend1/Dockerfile
      args: 
        build_info: Built from Docker compose
    env_file: ./.env
    ports: 
      - $BACKEND1_LOCAL_PORT:$BACKEND1_DOCKER_PORT
    depends_on:
      - service-frontend     
    environment:
      - PORT=$BACKEND1_DOCKER_PORT
      - SERVICE_API2_ENDPOINT=http://service-backend2:$BACKEND2_DOCKER_PORT/api
      - DB_HOST=mongodb
      - DB_USER=$MONGODB_USER
      - DB_PASSWORD=$MONGODB_PASSWORD
      - DB_NAME=$MONGODB_DATABASE
      - DB_PORT=$MONGODB_DOCKER_PORT
      - CLIENT_ORIGIN=$CLIENT_ORIGIN
    networks: 
      - backend-network
      - frontend-network

  # Backend API 2 service
  service-backend2:
    restart: unless-stopped
    build: 
      context: .
      dockerfile: microservices/service-backend2/Dockerfile
      args: 
        build_info: Built from Docker compose
    expose:
      - $BACKEND2_DOCKER_PORT
    depends_on:
      - service-backend1
      - mongodb
    environment:
      - PORT=$BACKEND2_DOCKER_PORT
    networks: 
      - backend-network

  # Kong API gateway service db-less version 2.8.0
  kong:
    platform: linux/arm64
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      KONG_DATABASE: "off"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    networks:
      - kong-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - ./kong/kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - ./kong/kong_tmp_vol:/tmp
      - ./kong/config:/opt/kong
      - ./kong/logs:/usr/local/kong/logs       
    security_opt:
      - no-new-privileges

  # Konga GUI service, Kong admin API interface version 0.14.9
  konga:
    image: pantsel/konga
    restart: always
    environment:
      # For use build-in filesystem db,
      # Konga creator said `I've done it with no problems on production environments.`
      # But the default `sails-disk` adapter is not designed for use as a production database;
      - NODE_ENV=development
      - KONGA_SEED_USER_DATA_SOURCE_FILE=/run/konga.users.js
      - KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE=/run/konga.nodes.js
    ports:
      - 127.0.0.1:1337:1337
    networks:
      - kong-net
    volumes:
      - ./kong/konga/konga.nodes.js:/run/konga.nodes.js
      - ./kong/konga/konga.users.js:/run/konga.users.js

volumes:
  mongo_data: {}
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  
networks:
  backend-network:
  frontend-network:
  kong-net:
    external: false

